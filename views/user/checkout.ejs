<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZAPZONE - Checkout</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/css/style.css" type="text/css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <style>
        body {
            background-color: #f5f5f5;
            font-family: 'Nunito Sans', sans-serif;
        }

        /* Breadcrumb Styles */
        .zz-breadcrumb-area {
            background-color: #fff;
            padding: 15px 0;
            border-bottom: 1px solid #eee;
            margin-bottom: 30px;
        }

        .zz-breadcrumb {
            margin-bottom: 0;
            padding: 0;
            background: none;
        }

        .zz-breadcrumb-item a {
            color: #555;
            text-decoration: none;
            transition: color 0.3s;
        }

        .zz-breadcrumb-item a:hover {
            color: #e74c3c;
        }

        .zz-breadcrumb-item.active {
            color: #e74c3c;
        }

        /* Checkout Container */
        .zz-checkout-container {
            background-color: white;
            border-radius: 8px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .zz-checkout-title {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 20px;
            color: #333;
            border-bottom: 1px solid #eee;
            padding-bottom: 15px;
        }

        /* Delivery Address Section */
        .zz-section-title {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 15px;
            color: #333;
            display: flex;
            align-items: center;
        }

        .zz-section-title i {
            margin-right: 8px;
            color: #e74c3c;
        }

        .zz-address-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: #fff;
            transition: transform 0.2s, box-shadow 0.2s;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .zz-address-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .zz-address-card h5 {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 8px;
            color: #222;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .zz-address-card p {
            font-size: 15px;
            color: #444;
            margin-bottom: 8px;
            line-height: 1.5;
        }

        .zz-address-type {
            font-size: 12px;
            font-weight: 600;
            color: #fff;
            background-color: #e74c3c;
            padding: 5px 12px;
            border-radius: 12px;
            display: inline-flex;
            align-items: center;
            gap: 5px;
            width:77px;
        }

        .zz-address-type i {
            font-size: 11px;
        }

        .zz-address-actions {
            margin-top: 12px;
            display: flex;
            gap: 10px;
        }

        .zz-address-actions a {
            color: #fff;
            text-decoration: none;
            font-size: 13px;
            font-weight: 600;
            padding: 8px 16px;
            border-radius: 5px;
            background-color: #e74c3c;
            transition: background-color 0.3s, transform 0.2s;
        }

        .zz-address-actions a:hover {
            background-color: #c0392b;
            transform: translateY(-1px);
        }

        .zz-add-address-btn {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .zz-add-address-btn:hover {
            background-color: #c0392b;
        }

        /* Payment Method Section */
        .zz-payment-method {
            margin-top: 30px;
        }

        .zz-payment-security {
            font-size: 13px;
            color: #28a745;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }

        .zz-payment-security i {
            margin-right: 5px;
        }

        .zz-payment-option {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }

        .zz-payment-option input[type="radio"] {
            margin-right: 10px;
        }

        .zz-payment-option label {
            font-size: 14px;
            color: #333;
            font-weight: 600;
            flex: 1;
        }

        .zz-payment-option img {
            height: 20px;
            margin-left: 10px;
        }

        .zz-payment-option.selected {
            border-color: #e74c3c;
            background-color: #fff5f5;
        }

      

        .zz-payment-option.disabled label {
            color: #777;
        }

        .zz-coming-soon {
            font-size: 12px;
            color: #e74c3c;
            margin-left: 10px;
        }

        .zz-wallet-balance {
            background-color: #e9ecef;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 13px;
            color: #28a745;
        }

        /* Order Summary Section */
        .zz-order-summary {
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 25px;
        }

        .zz-summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
        }

        .zz-summary-label {
            color: #555;
        }

        .zz-summary-value {
            font-weight: 600;
            color: #333;
        }

        .zz-item-price-original {
            text-decoration: line-through;
            color: #777;
            font-size: 13px;
            margin-right: 8px;
        }

        .zz-item-price-offer {
            color: #e74c3c;
            font-weight: 600;
        }

        .zz-item-offer {
            font-size: 13px;
            color: #fff;
            background-color: #28a745;
            padding: 4px 10px;
            border-radius: 12px;
            margin-top: 8px;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .zz-item-offer i {
            font-size: 11px;
        }

        .zz-no-offer {
            font-size: 13px;
            color: #999;
            margin-top: 8px;
            font-style: italic;
        }

        .zz-summary-total {
            display: flex;
            justify-content: space-between;
            padding-top: 15px;
            margin-top: 15px;
            border-top: 1px solid #eee;
        }

        .zz-total-label {
            font-size: 16px;
            font-weight: 700;
            color: #333;
        }

        .zz-total-value {
            font-size: 18px;
            font-weight: 800;
            color: #e74c3c;
        }

        /* Coupon Section */
        .zz-coupon-section {
            margin-bottom: 20px;
        }

        .zz-coupon-input {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
            width: 70%;
            font-size: 14px;
        }

        .zz-apply-coupon-btn {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-left: 10px;
        }

        .zz-apply-coupon-btn:hover {
            background-color: #c0392b;
        }

      .zz-view-coupons-btn {
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-top: 10px;
    display: inline-block;
}

.zz-view-coupons-btn:hover {
    background-color: #c0392b;
}

        .zz-coupon-applied {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            color: #28a745;
            font-size: 14px;
            font-weight: 600;
        }

        .zz-coupon-applied i {
            margin-right: 5px;
        }

        .zz-remove-coupon {
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 5px;
    font-size: 13px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-left: 10px;
}

.zz-remove-coupon:hover {
    background-color: #c0392b;
}

        /* Place Order Button */
        .zz-place-order-btn {
            display: block;
            width: 100%;
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 14px 20px;
            text-align: center;
            font-weight: 600;
            border-radius: 5px;
            margin-top: 20px;
            cursor: pointer;
            transition: background-color 0.3s;
            text-decoration: none;
        }

        .zz-place-order-btn:hover {
            background-color: #c0392b;
            color: white;
            text-decoration: none;
        }

        .zz-place-order-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .zz-secure-checkout {
            text-align: center;
            margin-top: 10px;
            font-size: 13px;
            color: #28a745;
        }

        .zz-secure-checkout i {
            margin-right: 5px;
        }

        /* SweetAlert2 Fix */
        .swal2-container {
            z-index: 9999 !important;
        }

        /* Responsive Styles */
        @media (max-width: 991px) {
            .zz-order-summary {
                margin-top: 30px;
            }
        }

        @media (max-width: 576px) {
            .zz-checkout-title {
                font-size: 20px;
            }
            .zz-address-card {
                padding: 15px;
            }
            .zz-coupon-input {
                width: 60%;
            }
            .zz-address-actions a {
                padding: 6px 12px;
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <%- include("../partials/user/header") %>
    <!-- Breadcrumb Navigation -->
    <div class="zz-breadcrumb-area">
        <div class="container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb zz-breadcrumb">
                    <li class="breadcrumb-item zz-breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item zz-breadcrumb-item"><a href="/cart">Cart</a></li>
                    <li class="breadcrumb-item zz-breadcrumb-item active" aria-current="page">Checkout</li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- Checkout Container -->
    <div class="container">
        <div class="row">
            <!-- Checkout Form Section -->
            <div class="col-lg-8">
                <div class="zz-checkout-container">
                    <h2 class="zz-checkout-title">Complete Your Order</h2>
                    <!-- Delivery Address -->
                    <div class="zz-delivery-address">
                        <h3 class="zz-section-title"><i class="fa fa-map-marker-alt"></i> Delivery Address</h3>
                        <% 
                            const defaultAddress = addresses && Array.isArray(addresses) && addresses.length > 0 
                                ? addresses.find(address => address.isDefault) 
                                : null;
                        %>
                        <% if (defaultAddress) { %>
                            <div class="zz-address-card">
                                <h5><i class="fa fa-user"></i> <%= defaultAddress.name || 'N/A' %></h5>
                                <p>
                                    <i class="fa fa-phone"></i> 
                                    <%= defaultAddress.phone || 'N/A' %>
                                    <%= defaultAddress.altPhone ? `, ${defaultAddress.altPhone}` : '' %>
                                </p>
                                <p>
                                    <i class="fa fa-map-pin"></i> 
                                    <%= defaultAddress.landMark || '' %>
                                    <%= defaultAddress.city ? `, ${defaultAddress.city}` : '' %>
                                    <%= defaultAddress.state ? `, ${defaultAddress.state}` : '' %>
                                    <%= defaultAddress.pincode ? `, ${defaultAddress.pincode}` : '' %>
                                </p>
                                <span class="zz-address-type">
                                    <i class="fa fa-home"></i> <%= defaultAddress.addressType || 'HOME' %>
                                </span>
                                <div class="zz-address-actions">
                                    <a href="/edit-address?id=<%= defaultAddress._id %>">EDIT</a>
                                    <a href="/addresses">CHANGE</a>
                                </div>
                            </div>
                        <% } else { %>
                            <p>No default address found. Please add or select a default address.</p>
                            <a href="/add-address" class="zz-add-address-btn">Add New Address</a>
                            <a href="/addresses" class="zz-add-address-btn" style="margin-left: 10px;">Select Default Address</a>
                        <% } %>
                    </div>

                    <!-- Payment Method -->
                    <div class="zz-payment-method">
                        <h3 class="zz-section-title"><i class="fa fa-credit-card"></i> Payment Method</h3>
                        <p class="zz-payment-security"><i class="fa fa-lock"></i> All transactions are secure and encrypted</p>
                        <div class="zz-payment-option selected">
                            <input type="radio" name="payment" id="cod" value="COD" checked>
                            <label for="cod">Cash on Delivery</label>
                        </div>
                        <div class="zz-payment-option">
                            <input type="radio" name="payment" id="razorpay" value="Razorpay">
                            <label for="razorpay">Razorpay</label>
                         <img src="/img/payment/razorpay-logo.svg" alt="Razorpay" width="150" height="50">
                        </div>
                        <div class="zz-payment-option disabled">
                            <input type="radio" name="payment" id="wallet" value="Wallet" >
                            <label for="wallet">Pay using your wallet balance</label>
                            <div class="zz-wallet-balance">
                                WALLET BALANCE: ₹<%= typeof user !== 'undefined' && user && user.walletBalance ? user.walletBalance.toFixed(2) : '0.00' %>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary Section -->
            <div class="col-lg-4">
                <div class="zz-order-summary">
                    <h3 class="zz-section-title"><i class="fa fa-shopping-bag"></i> Order Summary</h3>
                    <% if (typeof cartItems !== 'undefined' && Array.isArray(cartItems) && cartItems.length > 0) { %>
                        <% cartItems.forEach(item => { %>
                            <div class="zz-summary-item">
                                <span class="zz-summary-label">
                                    <%= item.productId && item.productId.productName ? item.productId.productName : 'Unknown Product' %> 
                                    (Qty: <%= item.quantity || 0 %>)
                                    <% if (item.offerId && item.offerCode && item.discount > 0) { %>
                                        <div class="zz-item-offer">
                                            <i class="fa fa-tag"></i> Offer: <%= item.offerCode %> (Saved ₹<%= item.discount ? item.discount.toFixed(2) : '0.00' %>)
                                        </div>
                                    <% } else { %>
                                        <div class="zz-no-offer">No offer applied</div>
                                    <% } %>
                                </span>
                                <span class="zz-summary-value">
                                    <% if (item.discount > 0) { %>
                                        <span class="zz-item-price-original">
                                            ₹<%= item.productId && item.productId.salePrice ? (item.productId.salePrice * item.quantity).toFixed(2) : '0.00' %>
                                        </span>
                                        <span class="zz-item-price-offer">
                                            ₹<%= item.price && item.quantity ? ((item.price * item.quantity) - (item.discount || 0)).toFixed(2) : '0.00' %>
                                        </span>
                                    <% } else { %>
                                        ₹<%= item.price && item.quantity ? (item.price * item.quantity).toFixed(2) : '0.00' %>
                                    <% } %>
                                </span>
                            </div>
                        <% }) %>
                        <div class="zz-summary-item">
                            <span class="zz-summary-label">Subtotal</span>
                            <span class="zz-summary-value">₹<%= typeof subtotal !== 'undefined' && subtotal ? subtotal.toFixed(2) : '0.00' %></span>
                        </div>
                        <% if (typeof offerDiscount !== 'undefined' && offerDiscount > 0) { %>
                            <div class="zz-summary-item">
                                <span class="zz-summary-label">Offer Discount</span>
                                <span class="zz-summary-value">-₹<%= offerDiscount.toFixed(2) %></span>
                            </div>
                        <% } %>
                        <div class="zz-summary-item">
                            <span class="zz-summary-label">Shipping</span>
                            <span class="zz-summary-value">₹<%= typeof shippingCharge !== 'undefined' && shippingCharge ? shippingCharge.toFixed(2) : '50.00' %></span>
                        </div>
                        <% if (typeof couponDiscount !== 'undefined' && couponDiscount > 0 && cart && cart.coupon && cart.coupon.code) { %>
                            <div class="zz-summary-item">
                                <span class="zz-summary-label">Coupon Discount (<%= cart.coupon.code %>)</span>
                                <span class="zz-summary-value">-₹<%= couponDiscount.toFixed(2) %></span>
                            </div>
                        <% } %>
                        <div class="zz-summary-total">
                            <span class="zz-total-label">GRAND TOTAL</span>
                            <span class="zz-total-value">₹<%= typeof total !== 'undefined' && total ? total.toFixed(2) : '0.00' %></span>
                        </div>
                        <!-- Coupon Section -->
                        <div class="zz-coupon-section">
                            <% if ( cart && cart.coupon && cart.coupon.code && couponDiscount > 0) { %>
                                <div class="zz-coupon-applied">
                                    <i class="fa fa-check-circle"></i>
                                    Coupon Applied: <%= cart.coupon.code %>
                                    <button class="zz-remove-coupon" id="removeCouponBtn">Remove</button>
                                </div>
                            <% } else { %>
                                <input type="text" id="couponCode" class="zz-coupon-input" placeholder="Enter Coupon Code">
                                <button id="applyCouponBtn" class="zz-apply-coupon-btn">Apply</button>
                                <button id="viewCouponsBtn" class="zz-view-coupons-btn">View Available Coupons</button>
                            <% } %>
                        </div>
                    <% } else { %>
                        <p>Your cart is empty.</p>
                    <% } %>

                    <!-- Place Order Form -->
                    <form id="placeOrderForm" action="/place-order" method="POST">
                        <input type="hidden" name="addressId" id="selectedAddressId" value="<%= defaultAddress && defaultAddress._id ? defaultAddress._id : '' %>">
                        <input type="hidden" name="couponCode" id="appliedCouponCode" value="<%= cart && cart.coupon && cart.coupon.code ? cart.coupon.code : '' %>">
                        <input type="hidden" name="paymentMethod" id="paymentMethod" value="COD">
                        <button type="submit" class="zz-place-order-btn" id="placeOrderBtn" <%= !defaultAddress ? 'disabled' : '' %>>Place Order</button>
                    </form>
                    <p class="zz-secure-checkout"><i class="fa fa-lock"></i> Secure Checkout</p>
                </div>
            </div>
        </div>
    </div>
    <%- include("../partials/user/footer") %>

    <script src="/js/jquery-3.3.1.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            if (typeof Swal === 'undefined') {
                console.error('SweetAlert2 not loaded');
                return;
            }

            const placeOrderForm = document.querySelector('#placeOrderForm');
            const placeOrderBtn = document.querySelector('#placeOrderBtn');
            const viewCouponsBtn = document.querySelector('#viewCouponsBtn');
            const applyCouponBtn = document.querySelector('#applyCouponBtn');
            const removeCouponBtn = document.querySelector('#removeCouponBtn');
            const couponCodeInput = document.querySelector('#couponCode');
            const appliedCouponCode = document.querySelector('#appliedCouponCode');
            const paymentMethodInputs = document.querySelectorAll('input[name="payment"]');
            const paymentMethodField = document.querySelector('#paymentMethod');
            const orderIdField = document.querySelector('#orderId');
            const razorpayOrderIdField = document.querySelector('#razorpayOrderId');
            const razorpayPaymentIdField = document.querySelector('#razorpayPaymentId');
            const razorpaySignatureField = document.querySelector('#razorpaySignature');

            if (!placeOrderForm || !placeOrderBtn || !paymentMethodField) {
                console.error('Form, button, or payment method field not found');
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Page elements are missing. Please try refreshing the page.'
                });
                return;
            }

            // Update payment method
            paymentMethodInputs.forEach(input => {
                input.addEventListener('change', function() {
                    paymentMethodField.value = this.value;
                    document.querySelectorAll('.zz-payment-option').forEach(option => {
                        option.classList.remove('selected');
                    });
                    this.parentElement.classList.add('selected');
                    console.log('Payment method updated to:', this.value);
                });
            });

            // View Coupons Popup
            if (viewCouponsBtn) {
                viewCouponsBtn.addEventListener('click', async function() {
                    try {
                        const response = await fetch('/coupons/available', {
                            method: 'GET',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        const result = await response.json();

                        if (!result.success || !result.coupons || result.coupons.length === 0) {
                            Swal.fire({
                                icon: 'info',
                                title: 'No Coupons Available',
                                text: 'There are no active coupons at the moment.'
                            });
                            return;
                        }

                        let couponHtml = '<div style="max-height: 300px; overflow-y: auto;">';
                        result.coupons.forEach(coupon => {
                            couponHtml += `
                                <div style="border-bottom: 1px solid #eee; padding: 10px 0;">
                                    <strong>${coupon.code || 'N/A'}</strong>
                                    <p style="margin: 5px 0; font-size: 14px;">
                                        ${coupon.discountType === 'percentage' ? `${coupon.discountAmount || 0}% off` : `₹${coupon.discountAmount || 0} off`} 
                                        (Min. ₹${coupon.minOrderAmount || 0})
                                        <br>Expires: ${coupon.expiryDate ? new Date(coupon.expiryDate).toLocaleDateString() : 'N/A'}
                                    </p>
                                    <button class="copy-coupon-btn" data-code="${coupon.code || ''}" style="
                                        background-color: #e74c3c;
                                        color: white;
                                        border: none;
                                        padding: 5px 10px;
                                        border-radius: 3px;
                                        cursor: pointer;">
                                        Copy Code
                                    </button>
                                </div>`;
                        });
                        couponHtml += '</div>';

                        Swal.fire({
                            title: 'Available Coupons',
                            html: couponHtml,
                            showConfirmButton: true,
                            confirmButtonText: 'Close',
                            width: '500px',
                            didOpen: () => {
                                document.querySelectorAll('.copy-coupon-btn').forEach(btn => {
                                    btn.addEventListener('click', function() {
                                        const code = this.getAttribute('data-code');
                                        if (code) {
                                            navigator.clipboard.writeText(code).then(() => {
                                                Swal.fire({
                                                    icon: 'success',
                                                    title: 'Copied!',
                                                    text: `Coupon code ${code} copied to clipboard.`,
                                                    timer: 1500,
                                                    showConfirmButton: false
                                                });
                                                if (couponCodeInput) couponCodeInput.value = code;
                                            }).catch(err => {
                                                console.error('Error copying coupon:', err);
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Error',
                                                    text: 'Failed to copy coupon code.'
                                                });
                                            });
                                        }
                                    });
                                });
                            }
                        });
                    } catch (error) {
                        console.error('Error fetching coupons:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to load coupons. Please try again.'
                        });
                    }
                });
            }

            // Apply Coupon
            if (applyCouponBtn && couponCodeInput) {
                applyCouponBtn.addEventListener('click', async function() {
                    const couponCode = couponCodeInput.value.trim();
                    const subtotal = <%= typeof subtotal !== 'undefined' && subtotal ? subtotal : 0 %>;

                    if (!couponCode) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Invalid Input',
                            text: 'Please enter a coupon code.'
                        });
                        return;
                    }

                    if (subtotal <= 0) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Invalid Cart',
                            text: 'Your cart is empty or has an invalid subtotal.'
                        });
                        return;
                    }

                    try {
                        const response = await fetch('/apply-coupon', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ couponCode, subtotal })
                        });
                        const result = await response.json();

                        if (result.success) {
                            appliedCouponCode.value = couponCode;
                            Swal.fire({
                                icon: 'success',
                                title: 'Coupon Applied',
                                text: `Coupon ${couponCode} applied! Discount: ₹${result.discount ? result.discount.toFixed(2) : '0.00'}`
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Invalid Coupon',
                                text: result.message || 'This coupon is not valid.'
                            });
                        }
                    } catch (error) {
                        console.error('Error applying coupon:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to apply coupon. Please try again.'
                        });
                    }
                });
            }

            // Remove Coupon
            if (removeCouponBtn) {
                removeCouponBtn.addEventListener('click', async function() {
                    try {
                        const response = await fetch('/remove-coupon', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ userId: '<%= typeof userId !== 'undefined' && userId ? userId : '' %>' })
                        });
                        const result = await response.json();

                        if (result.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Coupon Removed',
                                text: 'The coupon has been removed.'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: result.message || 'Failed to remove coupon.'
                            });
                        }
                    } catch (error) {
                        console.error('Error removing coupon:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Failed to remove coupon. Please try again.'
                        });
                    }
                });
            }

            // Place Order
            if (placeOrderBtn) {
                placeOrderBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const selectedAddressId = document.querySelector('#selectedAddressId').value;
                    const paymentMethod = paymentMethodField.value;

                    console.log('Place Order clicked', { selectedAddressId, paymentMethod });

                    if (!selectedAddressId) {
                        Swal.fire({
                            icon: 'error',
                            title: 'No Default Address',
                            text: 'Please set a default address before placing the order.'
                        });
                        return;
                    }

                    if (!['COD', 'Razorpay'].includes(paymentMethod)) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Payment Method',
                            text: 'Please select a valid payment method.'
                        });
                        return;
                    }

                    if (paymentMethod === 'Razorpay') {
                        console.log('Initiating Razorpay payment');
                        try {
                            const response = await fetch('/create-razorpay-order', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    amount: <%= typeof total !== 'undefined' && total ? total * 100 : 0 %>,
                                    addressId: selectedAddressId,
                                    couponCode: appliedCouponCode.value
                                })
                            });
                            const result = await response.json();
                            console.log('Create Razorpay order response:', result);

                            if (!result.success || !result.order || !result.orderId) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Order Creation Failed',
                                    text: result.message || 'Failed to create Razorpay order.'
                                });
                                window.location.href = `/payment-failure?error=${encodeURIComponent(result.message || 'Failed to create Razorpay order')}`;
                                return;
                            }

                            const options = {
                                key: '<%= typeof process !== 'undefined' && process.env && process.env.RAZORPAY_KEY_ID ? process.env.RAZORPAY_KEY_ID : '' %>',
                                amount: result.order.amount,
                                currency: 'INR',
                                name: 'ZAPZONE',
                                description: 'Order Payment',
                                image: '/img/logo.png',
                                order_id: result.order.id,
                                handler: async function(response) {
                                    console.log('Razorpay payment response:', response);
                                    try {
                                        const verifyResponse = await fetch('/verify-razorpay-payment', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({
                                                razorpay_order_id: response.razorpay_order_id,
                                                razorpay_payment_id: response.razorpay_payment_id,
                                                razorpay_signature: response.razorpay_signature,
                                                orderId: result.orderId
                                            })
                                        });
                                        const verifyResult = await verifyResponse.json();
                                        console.log('Verify payment response:', verifyResult);

                                        if (verifyResult.success) {
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Payment Successful',
                                                text: 'Your payment was successful! Redirecting to order success page...',
                                                timer: 2000,
                                                showConfirmButton: false
                                            }).then(() => {
                                                window.location.href = `/order-success?orderId=${encodeURIComponent(result.orderId)}`;
                                            });
                                        } else {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Payment Failed',
                                                text: verifyResult.message || 'Payment verification failed. Please try again.'
                                            });
                                            window.location.href = `/payment-failure?error=${encodeURIComponent(verifyResult.message || 'Payment verification failed')}`;
                                        }
                                    } catch (error) {
                                        console.error('Error verifying payment:', error);
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Payment Error',
                                            text: 'Failed to verify payment. Please try again.'
                                        });
                                        window.location.href = '/payment-failure?error=Failed%20to%20verify%20payment';
                                    }
                                },
                                prefill: {
                                    name: '<%= typeof user !== 'undefined' && user && user.name ? user.name : '' %>',
                                    email: '<%= typeof user !== 'undefined' && user && user.email ? user.email : '' %>',
                                    contact: '<%= defaultAddress && defaultAddress.phone ? defaultAddress.phone : '' %>'
                                },
                                theme: {
                                    color: '#e74c3c'
                                },
                                modal: {
                                    ondismiss: function() {
                                        Swal.fire({
                                            icon: 'warning',
                                            title: 'Payment Cancelled',
                                            text: 'You cancelled the payment. Please try again to complete your order.'
                                        });
                                        window.location.href = '/payment-failure?error=Payment%20cancelled%20by%20user';
                                    }
                                }
                            };

                            console.log('Opening Razorpay modal');
                            const rzp = new Razorpay(options);
                            rzp.on('payment.failed', function(response) {
                                console.error("Payment Failed:", response.error);
                                window.location.href = '/payment-failure?error=Payment%20cancelled%20by%20user';
                            });
                            rzp.open();
                        } catch (error) {
                            console.error('Error creating Razorpay order:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Initiation Failed',
                                text: 'Failed to initiate payment. Please try again.'
                            });
                            window.location.href = '/payment-failure?error=Failed%20to%20initiate%20payment';
                        }
                    } else {
                        // COD flow
                        paymentMethodField.value = 'COD';
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Placed',
                            text: 'Your order is being processed!',
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            console.log('Submitting form for COD');
                            placeOrderForm.submit();
                        });
                    }
                });
            }
        });
    </script>
</body>
</html>