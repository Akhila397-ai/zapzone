<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="ZAPZONE Order Details">
    <title>ZAPZONE - Order Details</title>

    <!-- Include external CSS dependencies -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/css/elegant-icons.css" type="text/css">
    <link rel="stylesheet" href="/css/magnific-popup.css" type="text/css">
    <link rel="stylesheet" href="/css/nice-select.css" type="text/css">
    <link rel="stylesheet" href="/css/owl.carousel.min.css" type="text/css">
    <link rel="stylesheet" href="/css/slicknav.min.css" type="text/css">
    <link rel="stylesheet" href="/css/style.css" type="text/css">

    <!-- Add SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Add Razorpay SDK -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <style>
        /* Existing styles unchanged */
        .order-details-page {
            font-family: 'Nunito Sans', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #2d3748;
            line-height: 1.6;
            background-color: #f7fafc;
        }

        .profile-container {
            display: flex;
            max-width: 1200px;
            margin: 40px auto;
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            overflow: hidden;
        }

        .content {
            flex: 1;
            padding: 40px;
        }

        .order-details-header {
            padding: 20px 0;
            border-bottom: 2px solid #edf2f7;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .order-details-header h1 {
            color: #1a202c;
            font-size: 16px;
            font-weight: 700;
            margin: 0;
        }

        .header-actions {
            display: flex;
            gap: 12px;
        }

        .btn-cancel {
            background-color: #e53e3e;
            color: #fff;
            border: none;
            padding: 10px 24px;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .btn-cancel:hover {
            background-color: #c53030;
        }

        .btn-invoice {
            background-color: #38b2ac;
            color: #fff;
            border: none;
            padding: 10px 24px;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .btn-invoice:hover {
            background-color: #319795;
        }

        .order-status {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 40px;
        }

        .status-badge {
            padding: 8px 20px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            text-transform: capitalize;
        }

        .status-pending { color: orange; font-weight: bold; }
        .status-processing { color: yellow; font-weight: bold; }
        .status-shipped { color: #276749; font-weight: bold; }
        .status-delivered { color: green; font-weight: bold; }
        .status-cancelled { color: red; font-weight: bold; }
        .status-return-request { color: #7b341e; font-weight: bold; }
        .status-returned { color: #007BFF; font-weight: bold; }
        .status-failed { color: #e53e3e; font-weight: bold; }

        .order-date {
            font-size: 16px;
            font-weight: 600;
            color: #38b2ac;
        }

        .section-title {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            color: #1a202c;
        }

        .section-title i {
            margin-right: 12px;
            color: #38b2ac;
            font-size: 24px;
        }

        .shipping-address {
            background-color: #f7fafc;
            padding: 24px;
            border-radius: 8px;
            margin-bottom: 40px;
            border: 1px solid #edf2f7;
        }

        .address-name {
            font-weight: 700;
            font-size: 16px;
            margin-bottom: 8px;
            color: #2d3748;
        }

        .address-details {
            font-size: 14px;
            color: #718096;
            line-height: 1.8;
        }

        .order-items {
            margin-bottom: 40px;
        }

        .item-card {
            display: flex;
            align-items: center;
            padding: 24px;
            border: 1px solid #edf2f7;
            border-radius: 8px;
            margin-bottom: 20px;
            background-color: #fff;
            transition: box-shadow 0.2s ease;
        }

        .item-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        }

        .item-image {
            width: 100px;
            min-width: 100px;
            height: 100px;
            margin-right: 24px;
        }

        .item-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 6px;
        }

        .item-details {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .item-name {
            font-size: 18px;
            font-weight: 700;
            margin-bottom: 8px;
            color: #2d3748;
        }

        .item-price {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 8px;
            color: #4a5568;
        }

        .item-actions {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .action-btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            border: none;
            transition: background-color 0.2s ease;
        }

        .btn-return {
            background-color: #ed8936;
            color: #fff;
        }

        .btn-return:hover {
            background-color: #dd6b20;
        }

        .btn-cancel-product {
            background-color: #e53e3e;
            color: #fff;
        }

        .btn-cancel-product:hover {
            background-color: #c53030;
        }

        .order-summary {
            background-color: #f7fafc;
            padding: 24px;
            border-radius: 8px;
            border: 1px solid #edf2f7;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            font-size: 16px;
            color: #4a5568;
        }

        .summary-row.total {
            border-top: 2px solid #edf2f7;
            padding-top: 12px;
            margin-top: 12px;
            font-weight: 700;
            font-size: 18px;
            color: #2d3748;
        }

        .back-button {
            color: #3182ce;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            margin-left: 734px;
            margin-bottom: 24px;
            font-weight: 600;
            font-size: 16px;
            transition: color 0.2s ease;
        }

        .back-button:hover {
            color: #2b6cb0;
        }

        .back-button i {
            margin-right: 8px;
        }

        @media (max-width: 768px) {
            .profile-container {
                flex-direction: column;
                margin: 20px;
            }

            .content {
                padding: 24px;
            }

            .order-details-header {
                flex-direction: column;
                align-items: flex-start;
            }

            .header-actions {
                margin-top: 16px;
                flex-wrap: wrap;
            }

            .item-card {
                flex-direction: column;
                align-items: flex-start;
            }

            .item-image {
                margin-bottom: 16px;
                margin-right: 0;
                width: 80px;
                height: 80px;
            }

            .item-actions {
                margin-top: 16px;
                flex-wrap: wrap;
            }
        }

        @media (max-width: 576px) {
            .order-details-header h1 {
                font-size: 22px;
            }

            .section-title {
                font-size: 18px;
            }

            .item-name {
                font-size: 16px;
            }

            .item-price {
                font-size: 14px;
            }
        }

        .btn-retry-payment {
            background-color: #3498db;
            color: #fff;
            border: none;
            padding: 10px 24px;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .btn-retry-payment:hover {
            background-color: #2980b9;
        }

        /* Styles for custom cancellation popup */
        .cancel-popup {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .cancel-popup-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        .cancel-popup-content h3 {
            margin: 0 0 20px;
            font-size: 18px;
            font-weight: 600;
            color: #2d3748;
        }

        .cancel-popup-content textarea {
            width: 100%;
            height: 100px;
            border: 1px solid #edf2f7;
            border-radius: 6px;
            padding: 10px;
            font-size: 14px;
            resize: vertical;
            margin-bottom: 20px;
        }

        .cancel-popup-content .popup-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .cancel-popup-content .popup-btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            border: none;
        }

        .popup-btn-confirm {
            background-color: #e53e3e;
            color: #fff;
        }

        .popup-btn-confirm:hover {
            background-color: #c53030;
        }

        .popup-btn-cancel {
            background-color: #edf2f7;
            color: #4a5568;
        }

        .popup-btn-cancel:hover {
            background-color: #e2e8f0;
        }
    </style>
</head>
<body>
    <div class="order-details-page">
        
        <%- include("../partials/user/header") %>
        
        <div class="profile-container">
            
            <%- include("../partials/user/sidebar", {active: 'orders'}) %>
            
            <div class="content">
                <h3>Order details</h3>
                <a href="/orders" class="back-button">
                    <i class="fa fa-arrow-left"></i> Back to Orders
                </a>
                
                <div class="order-details-header">
                    <h1>Order Details <%= order.orderId %></h1>
                    <div class="header-actions">
                        <% if (order.status !== 'Cancelled' && order.status !== 'Delivered' && order.status !== 'Returned' && order.paymentStatus !== 'Failed') { %>
                            <button class="btn-cancel">Cancel Order</button>
                        <% } %>
                        <% if (['Failed'].includes(order.paymentStatus)) { %>
                            <button class="btn-retry-payment" data-order-id="<%= order.orderId %>">Retry Payment</button>
                        <% } %>
                        <% if (order.paymentStatus !== 'Failed') { %>
                            <a href="/download-invoice/<%= order.orderId %>" class="btn-invoice">Download Invoice</a>
                        <% } %>
                    </div>
                </div>
                
                <div class="order-details-content">
                    <div class="order-status">
                        <div class="status-badge status-<%= (order.paymentStatus === 'Failed' ? 'failed' : order.status.toLowerCase().replace(' ', '-')) %>">
                            <%= order.paymentStatus === 'Failed' ? 'Failed' : order.status %>
                        </div>
                        <div class="order-date">Order Date: <%= order.createdOn ? new Date(order.createdOn).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) : 'N/A' %></div>
                    </div>
                    
                    <div class="shipping-info">
                        <h2 class="section-title">
                            <i class="fa fa-map-marker"></i> Shipping Address
                        </h2>
                        <div class="shipping-address">
                            <% if (selectedAddress) { %>
                                <div class="address-name"><%= selectedAddress.name %></div>
                                <div class="address-details">
                                    <%= selectedAddress.addressType %>, <%= selectedAddress.landMark %><br>
                                    <%= selectedAddress.city %>, <%= selectedAddress.state %> <%= selectedAddress.pincode %><br>
                                    Phone: <%= selectedAddress.phone %> <%= selectedAddress.altPhone ? ', Alt: ' + selectedAddress.altPhone : '' %>
                                </div>
                            <% } else { %>
                                <div class="address-details">Address not available</div>
                            <% } %>
                        </div>
                    </div>

                    <!-- Mode of Payment -->
                    <div class="payment-info">
                        <h2 class="section-title">
                            <i class="fa fa-credit-card"></i> Mode of Payment
                        </h2>
                        <div class="payment-details">
                            <p><%= order.paymentMethod %></p>
                        </div>
                    </div>

                    <!-- Invoice -->
                    <div class="invoice-info">
                        <h2 class="section-title">
                            <i class="fa fa-file-text"></i> Invoice
                        </h2>
                        <div class="invoice-details">
                            <p>Invoice Date: <%= order.invoiceDate ? new Date(order.invoiceDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) : 'Not available' %></p>
                        </div>
                    </div>
                    
                    <div class="order-items">
                        <h2 class="section-title">
                            <i class="fa fa-shopping-bag"></i> Order Items
                        </h2>
                        <% order.orderedItems.forEach((item, index) => { %>
                            <div class="item-card" data-item-id="<%= item._id %>">
                                <img
                                    src="<%= item.product.productImage && item.product.productImage[0] ? '/Uploads/product-images/' + item.product.productImage[0] : '/images/placeholder.jpg' %>"
                                    alt="<%= item.product.productName %>"
                                />
                                <div class="item-details">
                                    <div class="item-name"><%= item.product.productName %></div>
                                    <div class="item-price">₹<%= item.price.toFixed(2) %> x Qty: <%= item.quantity %></div>
                                    <% if (item.status) { %>
                                        <%
                                        let displayStatus = item.status;

                                        // If order payment failed, item status should be Failed
                                        if (order.paymentStatus === 'Failed' || item.status === 'Failed') {
                                            displayStatus = 'Failed';
                                        }
                                        // Set status as Delivered if order is delivered and item not cancelled/returned
                                        else if (order.status === 'Delivered' && !['Cancelled', 'Returned', 'Return Rejected'].includes(item.status)) {
                                            displayStatus = 'Delivered';
                                        }
                                        // If order is processing and item status is still pending, show as Processing
                                        else if (order.status === 'Processing' && item.status === 'Pending') {
                                            displayStatus = 'Processing';
                                        }
                                        %>
                                        <div class="status-badge status-<%= displayStatus.toLowerCase().replace(' ', '-') %>">
                                            <%= displayStatus %>
                                        </div>
                                    <% } %>
                                </div>
                                <div class="item-actions">
                                    <% if (order.status === 'Delivered' && item.status !== 'Cancelled' && item.status !== 'Returned' && item.status !== 'Return Requested' && order.paymentStatus !== 'Failed') { %>
                                        <button class="action-btn btn-return" data-item-id="<%= item.product._id %>">Request Return</button>
                                    <% } else if (['pending', 'processing'].includes(order.status) && order.paymentStatus !== 'Failed' && item.status !== 'Cancelled' && item.status !== 'Failed') { %>
                                        <button class="action-btn btn-cancel-product" data-item-id="<%= item.product._id %>">Cancel Product</button>
                                    <% } %>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                    
                    <div class="order-summary">
                        <h2 class="section-title">
                            <i class="fa fa-file-text-o"></i> Order Summary
                        </h2>
                        <div class="summary-row">
                            <div>Subtotal</div>
                            <div>₹<%= order.totalPrice.toFixed(2) %></div>
                        </div>
                        <div class="summary-row">
    <div>Coupon Discount</div>
    <div>₹<%= couponDiscount ? couponDiscount.toFixed(2) : '0.00' %></div>
</div>
<div class="summary-row">
    <div>Offer Discount</div>
    <div>₹<%= offerDiscount ? offerDiscount.toFixed(2) : '0.00' %></div>
</div>
                        <div class="summary-row">
                            <div>Shipping</div>
                            <div>₹50.00</div>
                        </div>
                        <div class="summary-row total">
                            <div>Grand Total</div>
                            <div>₹<%= order.finalAmount.toFixed(2) %></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Cancellation Popup -->
        <div class="cancel-popup" id="cancelPopup">
            <div class="cancel-popup-content">
                <h3>Reason for Cancellation</h3>
                <textarea id="cancelReason" placeholder="Please provide the reason for cancelling this order"></textarea>
                <div class="popup-actions">
                    <button class="popup-btn popup-btn-cancel" id="popupCancel">Cancel</button>
                    <button class="popup-btn popup-btn-confirm" id="popupConfirm">Submit</button>
                </div>
            </div>
        </div>
        
        <!-- Return Popup -->
        <div class="cancel-popup" id="returnPopup">
            <div class="cancel-popup-content">
                <h3>Reason for Return</h3>
                <textarea id="returnReason" placeholder="Please provide the reason for returning this product"></textarea>
                <div class="popup-actions">
                    <button class="popup-btn popup-btn-cancel" id="returnPopupCancel">Cancel</button>
                    <button class="popup-btn popup-btn-confirm" id="returnPopupConfirm">Submit</button>
                </div>
            </div>
        </div>
        
        <%- include("../partials/user/footer") %>
    </div>
    
    <!-- Include external JS dependencies -->
    <script src="/js/jquery-3.3.1.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/jquery.nice-select.min.js"></script>
    <script src="/js/jquery.nicescroll.min.js"></script>
    <script src="/js/jquery.magnific-popup.min.js"></script>
    <script src="/js/jquery.countdown.min.js"></script>
    <script src="/js/jquery.slicknav.js"></script>
    <script src="/js/mixitup.min.js"></script>
    <script src="/js/owl.carousel.min.js"></script>
    <script src="/js/main.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Handle Retry Payment button
            document.querySelectorAll('.btn-retry-payment').forEach(button => {
                button.addEventListener('click', async function () {
                    const orderId = this.getAttribute('data-order-id');
                    if (!orderId) {
                        console.error('Order ID is missing for retry payment');
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Order ID is missing. Please try again or contact support.',
                            showConfirmButton: true
                        });
                        return;
                    }

                    console.log('Retry Payment Clicked for Order:', orderId);

                    try {
                        // Step 1: Create Razorpay order for retry
                        const response = await fetch('/create-razorpay-order', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ orderId })
                        });

                        const result = await response.json();
                        console.log('Razorpay order creation response:', result);

                        if (!result.success || !result.order) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Order Creation Failed',
                                text: result.message || 'Failed to create Razorpay order.',
                                showConfirmButton: true
                            });
                            window.location.href = `/payment-failure?error=${encodeURIComponent(result.message || 'Failed to create Razorpay order')}&orderId=${orderId}`;
                            return;
                        }

                        // Step 2: Initialize Razorpay modal
                        const options = {
                            key: '<%= process.env.RAZORPAY_KEY_ID %>', // Ensure this is securely passed from server if needed
                            amount: result.order.amount,
                            currency: result.order.currency,
                            name: 'ZAPZONE',
                            description: 'Retry Payment for Order ' + orderId,
                            image: '/img/logo.png',
                            order_id: result.order.id,
                            handler: async function (response) {
                                console.log('Razorpay payment response:', response);
                                try {
                                    // Step 3: Verify payment
                                    const verifyResponse = await fetch('/verify-razorpay-payment', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({
                                            razorpay_order_id: response.razorpay_order_id,
                                            razorpay_payment_id: response.razorpay_payment_id,
                                            razorpay_signature: response.razorpay_signature,
                                            orderId
                                        })
                                    });

                                    const verifyResult = await verifyResponse.json();
                                    console.log('Verify payment response:', verifyResult);

                                    if (verifyResult.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Payment Successful',
                                            text: 'Your payment was successful! Your order is being processed.',
                                            timer: 2000,
                                            showConfirmButton: false
                                        }).then(() => {
                                            window.location.href = '/order-success';
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Payment Failed',
                                            text: verifyResult.message || 'Payment verification failed. Please try again.',
                                            showConfirmButton: true
                                        });
                                        window.location.href = `/payment-failure?error=${encodeURIComponent(verifyResult.message || 'Payment verification failed')}&orderId=${orderId}`;
                                    }
                                } catch (error) {
                                    console.error('Error verifying payment:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Error',
                                        text: 'Failed to verify payment. Please try again.',
                                        showConfirmButton: true
                                    });
                                    window.location.href = `/payment-failure?error=${encodeURIComponent('Failed to verify payment')}&orderId=${orderId}`;
                                }
                            },
                            prefill: {
                                name: '<%= order.user && order.user.name ? order.user.name : "" %>',
                                email: '<%= order.user && order.user.email ? order.user.email : "" %>',
                                contact: '<%= selectedAddress && selectedAddress.phone ? selectedAddress.phone : "" %>'
                            },
                            theme: { color: '#e74c3c' },
                            modal: {
                                ondismiss: function () {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Payment Cancelled',
                                        text: 'You cancelled the payment. You can retry the payment anytime.',
                                        showConfirmButton: true
                                    });
                                    window.location.reload();
                                }
                            }
                        };

                        console.log('Opening Razorpay modal for retry payment');
                        const rzp = new Razorpay(options);
                        rzp.on('payment.failed', async function (response) {
                            console.error('Payment Failed:', response.error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                text: response.error.description || 'Payment failed. Please try again.',
                                showConfirmButton: true
                            });
                            try {
                                // Update order status to Failed
                                await fetch('/update-order-status', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({
                                        orderId,
                                        status: 'Failed'
                                    })
                                });
                                window.location.href = `/payment-failure?error=${encodeURIComponent(response.error.description || 'Payment failed')}&orderId=${orderId}`;
                            } catch (error) {
                                console.error('Error updating order status:', error);
                                window.location.href = `/payment-failure?error=${encodeURIComponent('Failed to update order status')}&orderId=${orderId}`;
                            }
                        });
                        rzp.open();
                    } catch (error) {
                        console.error('Error initiating retry payment:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Initiation Failed',
                            text: 'Failed to initiate payment. Please try again.',
                            showConfirmButton: true
                        });
                        window.location.href = `/payment-failure?error=${encodeURIComponent('Failed to initiate payment')}&orderId=${orderId}`;
                    }
                });
            });

            // Handle Cancel Order button
            const cancelPopup = document.getElementById('cancelPopup');
            const popupConfirm = document.getElementById('popupConfirm');
            const popupCancel = document.getElementById('popupCancel');
            const cancelReason = document.getElementById('cancelReason');

            document.querySelector('.btn-cancel')?.addEventListener('click', function () {
                cancelPopup.style.display = 'flex';
            });

            popupCancel.addEventListener('click', function () {
                cancelPopup.style.display = 'none';
                cancelReason.value = '';
            });

            popupConfirm.addEventListener('click', function () {
                const reason = cancelReason.value.trim();
                if (!reason) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Please provide a reason for cancellation.'
                    });
                    return;
                }

                fetch('/cancelOrder', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId: '<%= order.orderId %>', reason })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: 'Order cancellation request submitted.',
                                showConfirmButton: false,
                                timer: 1500
                            }).then(() => window.location.reload());
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed',
                                text: 'Failed to cancel order: ' + data.message
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error cancelling order:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'An error occurred while cancelling the order.'
                        });
                    })
                    .finally(() => {
                        cancelPopup.style.display = 'none';
                        cancelReason.value = '';
                    });
            });

            // Handle Cancel Product buttons
            document.querySelectorAll('.btn-cancel-product').forEach(button => {
                button.addEventListener('click', function () {
                    const itemId = this.dataset.itemId;
                    console.log('Cancel Product Clicked:', { orderId: '<%= order._id %>', itemId });

                    if (!itemId) {
                        console.error('Item ID is missing');
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Product ID is missing.'
                        });
                        return;
                    }

                    Swal.fire({
                        title: 'Cancel Product',
                        text: 'Are you sure you want to cancel this product?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#e53e3e',
                        cancelButtonColor: '#718096',
                        confirmButtonText: 'Yes, cancel product',
                        cancelButtonText: 'No, keep it'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            fetch('/cancel-product', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    orderId: '<%= order._id %>',
                                    productId: itemId
                                })
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Cancelled!',
                                            text: 'Product cancelled successfully.',
                                            showConfirmButton: false,
                                            timer: 1500
                                        }).then(() => window.location.reload());
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Failed',
                                            text: 'Failed to cancel product: ' + data.message,
                                            showConfirmButton: false,
                                            timer: 1500
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error cancelling product:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred while cancelling the product.'
                                    });
                                });
                        }
                    });
                });
            });

            // Handle Return buttons
            document.querySelectorAll('.btn-return').forEach(button => {
                button.addEventListener('click', function () {
                    const itemId = this.dataset.itemId;
                    const returnPopup = document.getElementById('returnPopup');
                    const returnPopupConfirm = document.getElementById('returnPopupConfirm');
                    const returnPopupCancel = document.getElementById('returnPopupCancel');
                    const returnReason = document.getElementById('returnReason');

                    // Show the return popup
                    returnPopup.style.display = 'flex';

                    // Handle cancel button in popup
                    returnPopupCancel.addEventListener('click', function () {
                        returnPopup.style.display = 'none';
                        returnReason.value = '';
                    }, { once: true });

                    // Handle confirm button in popup
                    returnPopupConfirm.addEventListener('click', function () {
                        const reason = returnReason.value.trim();
                        if (!reason) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Please provide a reason for return.'
                            });
                            return;
                        }

                        Swal.fire({
                            title: 'Request Return',
                            text: 'Are you sure you want to request a return for this product?',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#38b2ac',
                            cancelButtonColor: '#718096',
                            confirmButtonText: 'Yes, request return',
                            cancelButtonText: 'Cancel'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                fetch('/request-return', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ orderId: '<%= order.orderId %>', itemId, reason })
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            Swal.fire({
                                                icon: 'success',
                                                title: 'Success',
                                                text: 'Return request submitted.',
                                                showConfirmButton: false,
                                                timer: 1500
                                            }).then(() => window.location.reload());
                                        } else {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Failed',
                                                text: 'Failed to request return: ' + data.message
                                            });
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error requesting return:', error);
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: 'An error occurred while requesting the return.'
                                        });
                                    })
                                    .finally(() => {
                                        returnPopup.style.display = 'none';
                                        returnReason.value = '';
                                    });
                            }
                        });
                    }, { once: true });
                });
            });
        });
    </script>
</body>
</html>