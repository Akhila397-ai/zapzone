<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZAPZONE - Payment Failed</title>
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/css/style.css" type="text/css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <style>
        /* Base Styles */
        body {
            background-color: #f5f5f5;
            font-family: 'Nunito Sans', sans-serif;
        }
        
        /* Breadcrumb Styles */
        .zz-breadcrumb-area {
            background-color: #fff;
            padding: 15px 0;
            border-bottom: 1px solid #eee;
            margin-bottom: 30px;
        }
        
        .zz-breadcrumb {
            margin-bottom: 0;
            padding: 0;
            background: none;
        }
        
        .zz-breadcrumb-item a {
            color: #555;
            text-decoration: none;
            transition: color 0.3s;
        }
        
        .zz-breadcrumb-item a:hover {
            color: #e74c3c;
        }
        
        .zz-breadcrumb-item.active {
            color: #e74c3c;
        }
        
        /* Payment Failed Container */
        .zz-payment-failed-container {
            padding: 50px 0;
        }
        
        .payment-failed-box {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            padding: 40px;
            text-align: center;
            max-width: 600px;
            margin: 0 auto;
            opacity: 0;
            transform: translateY(20px);
        }
        
        /* Error Icon */
        .error-icon {
            width: 100px;
            height: 100px;
            margin: 0 auto 30px;
            position: relative;
        }
        
        .error-circle {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background-color: #e74c3c;
            display: flex;
            align-items: center;
            justify-content: center;
            transform: scale(0);
        }
        
        .error-exclamation {
            color: white;
            font-size: 60px;
            font-weight: bold;
            opacity: 0;
        }
        
        /* Content Styles */
        .payment-failed-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 16px;
            color: #e74c3c;
            opacity: 0;
        }
        
        .payment-failed-text {
            font-size: 16px;
            line-height: 1.6;
            color: #555;
            margin-bottom: 30px;
            opacity: 0;
        }
        
        .payment-error-details {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: left;
            border-left: 4px solid #e74c3c;
            opacity: 0;
        }
        
        .payment-error-details h3 {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 15px;
            color: #333;
        }
        
        .payment-error-details p {
            margin-bottom: 10px;
            font-size: 14px;
            color: #555;
        }
        
        .error-code {
            font-family: monospace;
            background: #eee;
            padding: 2px 6px;
            border-radius: 4px;
            font-weight: 500;
        }
        
        /* Button Styles */
        .payment-action-buttons {
            display: flex;
            flex-direction: column;
            gap: 12px;
            opacity: 0;
        }
        
        .zz-btn {
            padding: 12px 20px;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 15px;
            border: none;
            display: block;
            width: 100%;
            text-align: center;
            text-decoration: none;
        }
        
        .zz-btn-primary {
            background-color: black;
            color: white;
        }
        
        .zz-btn-primary:hover {
            background-color: #333;
            color: white;
            text-decoration: none;
        }
        
        .zz-btn-secondary {
            background-color: #f8f9fa;
            color: #333;
            border: 1px solid #ddd;
        }
        
        .zz-btn-secondary:hover {
            background-color: #e9ecef;
            text-decoration: none;
            color: #333;
        }
        
        /* Responsive Styles */
        @media (max-width: 768px) {
            .payment-failed-box {
                padding: 30px 20px;
            }
            
            .payment-failed-title {
                font-size: 24px;
            }
            
            .error-icon {
                width: 80px;
                height: 80px;
                margin-bottom: 25px;
            }
            
            .error-circle {
                width: 80px;
                height: 80px;
            }
            
            .error-exclamation {
                font-size: 48px;
            }
        }
        
        @media (max-width: 480px) {
            .payment-failed-box {
                padding: 25px 15px;
            }
            
            .payment-failed-title {
                font-size: 22px;
            }
            
            .payment-failed-text {
                font-size: 14px;
            }
            
            .zz-btn {
                padding: 10px 15px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <!-- Breadcrumbs -->
    <div class="zz-breadcrumb-area">
        <div class="container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb zz-breadcrumb">
                    <li class="breadcrumb-item zz-breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item zz-breadcrumb-item"><a href="/checkout">Checkout</a></li>
                    <li class="breadcrumb-item zz-breadcrumb-item active" aria-current="page">Payment Failed</li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- Main Container -->
    <div class="zz-payment-failed-container">
        <div class="container">
            <div class="payment-failed-box">
                <div class="error-icon">
                    <div class="error-circle">
                        <div class="error-exclamation">!</div>
                    </div>
                </div>
                
                <h1 class="payment-failed-title">Payment Failed</h1>
                
                <p class="payment-failed-text">We're sorry, but we couldn't process your payment. Please check your payment details and try again.</p>
                
                <div class="payment-error-details">
                    <h3>Error Details</h3>
                    <p>Order ID: <span class="error-code"><%= orderId || 'N/A' %></span></p>
                    <p>Error: <span id="errorMessage" class="error-code"><%= error || 'N/A' %></span></p>
                    <p>Time: <span id="timestamp" class="error-code"></span></p>
                </div>
                
                <div class="payment-action-buttons">
                   
                        <a href="/orders" class="zz-btn zz-btn-primary" aria-label="View your orders">View Orders</a>
                 
                </div>
            </div>
        </div>
    </div>

    <%- include("../partials/user/footer") %>

    <script src="/js/jquery-3.3.1.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Set timestamp
            document.getElementById('timestamp').textContent = new Date().toLocaleString();

            // GSAP animations
            gsap.to('.payment-failed-box', { opacity: 1, y: 0, duration: 0.6, ease: 'power2.out' });
            gsap.to('.error-circle', { scale: 1, duration: 0.5, ease: 'back.out(1.7)', delay: 0.2 });
            gsap.to('.error-exclamation', { opacity: 1, duration: 0.3, delay: 0.6 });
            gsap.to('.payment-failed-title', { opacity: 1, y: 0, duration: 0.5, delay: 0.7 });
            gsap.to('.payment-failed-text', { opacity: 1, y: 0, duration: 0.5, delay: 0.8 });
            gsap.to('.payment-error-details', { opacity: 1, y: 0, duration: 0.5, delay: 0.9 });
            gsap.to('.payment-action-buttons', { opacity: 1, y: 0, duration: 0.5, delay: 1.0 });

            // Map Razorpay error codes to user-friendly messages
            const errorMessages = {
                'BAD_REQUEST_ERROR': 'Invalid payment details. Please check your card or account details and try again.',
                'SERVER_ERROR': 'Payment service is temporarily unavailable. Please try again later.',
                'GATEWAY_ERROR': 'There was an issue with the payment gateway. Please try again or use a different payment method.',
                'default': 'An unexpected error occurred. Please try again or contact support.'
            };

            // Try Payment Again button
            const tryAgainBtn = document.getElementById('tryAgainBtn');
            if (tryAgainBtn) {
                tryAgainBtn.addEventListener('click', async function(e) {
                    e.preventDefault();
                    const orderId = this.getAttribute('data-order-id');
                    if (!orderId || orderId === 'null' || orderId === '') {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: 'Order ID is missing. Please try again or contact support.',
                            showConfirmButton: true
                        });
                        return;
                    }

                    gsap.to('#tryAgainBtn', {
                        x: [-5, 5, -5, 5, 0],
                        duration: 0.4,
                        onComplete: async () => {
                            try {
                                // Check if Razorpay SDK is loaded
                                if (typeof Razorpay === 'undefined') {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Error',
                                        text: 'Payment service unavailable. Please try again later.',
                                        showConfirmButton: true
                                    });
                                    return;
                                }

                                // Fetch Razorpay key from config endpoint
                                const configResponse = await fetch('/config', {
                                    method: 'GET',
                                    headers: { 'Content-Type': 'application/json' }
                                });
                                const config = await configResponse.json();
                                if (!config.razorpayKeyId) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Configuration Error',
                                        text: 'Payment configuration is missing. Please contact support.',
                                        showConfirmButton: true
                                    });
                                    return;
                                }

                                // Create Razorpay order
                                const response = await fetch('/create-razorpay-order', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ orderId })
                                });
                                const result = await response.json();
                                if (!result.success || !result.order) {
                                    const errorMessage = errorMessages[result.errorCode] || result.message || 'Failed to create payment order.';
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Order Creation Failed',
                                        text: errorMessage,
                                        showConfirmButton: true
                                    });
                                    document.getElementById('errorMessage').textContent = errorMessage;
                                    return;
                                }

                                // Initialize Razorpay modal
                                const options = {
                                    key: config.razorpayKeyId,
                                    amount: result.order.amount,
                                    currency: result.order.currency || 'INR',
                                    name: 'ZAPZONE',
                                    description: `Retry Payment for Order ${orderId}`,
                                    image: '/img/logo.png',
                                    order_id: result.order.id,
                                    handler: async function(response) {
                                        try {
                                            const verifyResponse = await fetch('/verify-razorpay-payment', {
                                                method: 'POST',
                                                headers: { 'Content-Type': 'application/json' },
                                                body: JSON.stringify({
                                                    razorpay_order_id: response.razorpay_order_id,
                                                    razorpay_payment_id: response.razorpay_payment_id,
                                                    razorpay_signature: response.razorpay_signature,
                                                    orderId
                                                })
                                            });
                                            const verifyResult = await verifyResponse.json();
                                            if (verifyResult.success) {
                                                Swal.fire({
                                                    icon: 'success',
                                                    title: 'Payment Successful',
                                                    text: 'Your payment was successful! Your order is being processed.',
                                                    timer: 2000,
                                                    showConfirmButton: false
                                                }).then(() => {
                                                    window.location.href = `/order-success?orderId=${encodeURIComponent(orderId)}`;
                                                });
                                            } else {
                                                const errorMessage = errorMessages[verifyResult.errorCode] || verifyResult.message || 'Payment verification failed.';
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Payment Failed',
                                                    text: errorMessage,
                                                    showConfirmButton: true
                                                });
                                                document.getElementById('errorMessage').textContent = errorMessage;
                                            }
                                        } catch (error) {
                                            console.error('Error verifying payment:', error);
                                            const errorMessage = 'Failed to verify payment. Please try again.';
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Payment Error',
                                                text: errorMessage,
                                                showConfirmButton: true
                                            });
                                            document.getElementById('errorMessage').textContent = errorMessage;
                                        }
                                    },
                                    prefill: {
                                        name: result.user?.name || '',
                                        email: result.user?.email || '',
                                        contact: result.address?.phone || ''
                                    },
                                    theme: { color: '#e74c3c' },
                                    modal: {
                                        ondismiss: function() {
                                            Swal.fire({
                                                icon: 'warning',
                                                title: 'Payment Cancelled',
                                                text: 'You cancelled the payment. Try again anytime.',
                                                showConfirmButton: true
                                            });
                                        }
                                    }
                                };

                                const rzp = new Razorpay(options);
                                rzp.on('payment.failed', async function(response) {
                                    console.error('Payment Failed:', response.error);
                                    const errorMessage = errorMessages[response.error.code] || response.error.description || 'Payment failed.';
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed',
                                        text: errorMessage,
                                        showConfirmButton: true
                                    });
                                    try {
                                        await fetch('/update-order-status', {
                                            method: 'POST',
                                            headers: { 'Content-Type': 'application/json' },
                                            body: JSON.stringify({ orderId, status: 'Failed' })
                                        });
                                        document.getElementById('errorMessage').textContent = errorMessage;
                                    } catch (error) {
                                        console.error('Error updating order status:', error);
                                        document.getElementById('errorMessage').textContent = 'Failed to update order status.';
                                    }
                                });
                                rzp.open();
                            } catch (error) {
                                console.error('Error initiating retry payment:', error);
                                const errorMessage = 'Failed to initiate payment. Please try again or contact support.';
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Initiation Failed',
                                    text: errorMessage,
                                    showConfirmButton: true
                                });
                                document.getElementById('errorMessage').textContent = errorMessage;
                            }
                        }
                    });
                });
            }
        });
    </script>
</body>
</html>