<%- include('../../views/partials/admin/header') %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        :root {
            --primary-color: #6B6AE4;
            --primary-dark: #5655c6;
            --secondary-color: #2D3047;
            --text-dark: #333;
            --text-light: #495057;
            --background-light: #f8f9fa;
            --white: #fff;
            --danger: #dc3545;
            --success: #28a745;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            background-color: var(--background-light);
            color: var(--text-dark);
        }

        .content-main {
            padding-left: 250px;
            padding-right: 20px;
            padding-top: 20px;
            min-height: calc(100vh - 70px);
            background-color: var(--background-light);
        }

        .content-header {
            margin-bottom: 20px;
        }

        .content-title {
            font-size: 24px;
            font-weight: 600;
            color: var(--text-dark);
        }

        .card {
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            margin-bottom: 20px;
            background-color: var(--white);
            border: none;
        }

        .card-header {
            background-color: var(--background-light);
            border-bottom: 1px solid #e9ecef;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            padding: 1rem;
        }

        .div-sec {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 15px;
            background-color: var(--primary-color);
            height: 122px;
            padding: 0 2rem;
        }

        .input-group {
            border-radius: 6px;
            overflow: hidden;
            max-width: 500px;
            border: 1px solid #dfe6e9;
        }

        .input-group select {
            height: 40px;
            font-size: 14px;
            border: none;
            background-color: var(--white);
            color: var(--text-dark);
        }

        .btn-primary {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            padding: 8px 16px;
            font-weight: 500;
            border-radius: 7px;
            color: var(--white);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .stats-card {
            background: var(--white);
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        .stats-card h3 {
            font-size: 14px;
            color: var(--text-light);
            margin-bottom: 10px;
        }

        .stats-card p {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-dark);
            margin: 0;
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            grid-template-rows: repeat(2, auto);
            gap: 20px;
            margin-bottom: 30px;
        }

        .chart-card {
            background: var(--white);
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
            transition: transform 0.2s ease;
        }

        .chart-card:hover {
            transform: translateY(-3px);
        }

        .chart-container {
            height: 300px !important;
            width: 100%;
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .chart-title {
            font-size: 16px;
            font-weight: 600;
            margin: 0;
            color: var(--text-dark);
        }

        .chart-subtitle {
            font-size: 14px;
            color: var(--text-light);
            margin: 0;
        }

        .chart-legend {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
            justify-content: center;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
            color: var(--text-light);
        }

        .legend-color {
            width: 12px;
            height: 12px;
            border-radius: 3px;
        }

        .table-container {
            background: var(--white);
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);
        }

        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .table {
            margin-bottom: 0;
            width: 100%;
            border-collapse: collapse;
        }

        .table thead th {
            background-color: var(--primary-color);
            color: var(--white);
            font-weight: 600;
            font-size: 14px;
            padding: 12px 8px;
            text-align: left;
            vertical-align: middle;
        }

        .table thead th:nth-child(3),
        .table thead th:nth-child(4),
        .table thead th:nth-child(5) {
            text-align: center;
        }

        .table tbody td {
            vertical-align: middle;
            padding: 12px 8px;
            font-size: 14px;
            color: var(--text-dark);
        }

        .table tbody td:nth-child(3),
        .table tbody td:nth-child(4),
        .table tbody td:nth-child(5) {
            text-align: center;
        }

        .table-hover tbody tr:hover {
            background-color: rgba(59, 125, 221, 0.05);
        }

        .status-badge {
            padding: 5px 10px;
            border-radius: 12px;
            font-size: 12px;
        }

        .status-delivered {
            background: var(--success);
            color: var(--white);
        }

        .status-processing {
            background: #ffc107;
            color: var(--text-dark);
        }

        .status-cancelled {
            background: var(--danger);
            color: var(--white);
        }

        .status-shipped {
            background: #007bff;
            color: var(--white);
        }

        .status-returned {
            background: var(--danger);
            color: var(--white);
        }

        .modal.fade {
            background-color: rgba(0, 0, 0, 0.6);
        }

        .modal-content {
            background-color: var(--white);
            border-radius: 10px;
            padding: 25px;
            max-width: 480px;
            margin: 0 auto;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

        .modal-header {
            border-bottom: 2px solid #e9ecef;
            padding: 0 0 15px;
            position: relative;
        }

        .modal-title {
            font-size: 22px;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .btn-close {
            position: absolute;
            top: 12px;
            right: 12px;
            background: none;
            border: none;
            font-size: 26px;
            font-weight: 300;
            color: #6c757d;
            cursor: pointer;
        }

        .btn-close:hover {
            color: #343a40;
        }

        .modal-body {
            padding: 20px 0;
        }

        .modal-body p {
            color: var(--text-light);
            font-size: 14px;
            margin-bottom: 20px;
        }

        .modal-button-group {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            margin-top: 25px;
        }

        .modal-btn {
            padding: 10px 20px;
            font-size: 14px;
            font-weight: 500;
            border-radius: 6px;
            border: none;
            cursor: pointer;
        }

        .modal-btn-cancel {
            background-color: #6c757d;
            color: var(--white);
        }

        .modal-btn-cancel:hover {
            background-color: #5a6268;
        }

        .modal-btn-confirm {
            background-color: var(--primary-color);
            color: var(--white);
        }

        .modal-btn-confirm:hover {
            background-color: var(--primary-dark);
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: var(--text-light);
        }

        @media (max-width: 1200px) {
            .charts-container {
                grid-template-columns: repeat(2, 1fr);
            }
            .chart-container {
                height: 280px !important;
            }
        }

        @media (max-width: 992px) {
            .content-main {
                padding-left: 200px;
            }
            .charts-container {
                grid-template-columns: 1fr;
            }
            .chart-container {
                height: 250px !important;
            }
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 768px) {
            .content-main {
                padding-left: 20px;
                padding-right: 20px;
            }
            .div-sec {
                flex-direction: column;
                align-items: stretch;
                height: auto;
                padding: 1rem;
            }
            .input-group {
                margin-bottom: 15px;
                max-width: 100%;
            }
            .charts-container {
                grid-template-columns: 1fr;
            }
            .chart-container {
                height: 250px !important;
            }
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            .table-responsive {
                overflow-x: auto;
            }
            .table thead {
                display: none;
            }
            .table,
            .table tbody,
            .table tr,
            .table td {
                display: block;
                width: 100%;
            }
            .table tr {
                margin-bottom: 1rem;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }
            .table td {
                text-align: right;
                padding: 0.75rem 1rem;
                position: relative;
                padding-left: 50%;
            }
            .table td::before {
                content: attr(data-label);
                position: absolute;
                left: 1rem;
                width: 45%;
                text-align: left;
                font-weight: 500;
            }
            .modal-content {
                padding: 20px;
                max-width: 90%;
            }
            .modal-title {
                font-size: 20px;
            }
            .modal-btn {
                width: 100%;
                padding: 12px;
            }
            .modal-button-group {
                flex-direction: column;
                gap: 10px;
            }
        }

        @media (max-width: 576px) {
            .content-main {
                padding-left: 20px;
            }
            .charts-container {
                grid-template-columns: 1fr;
            }
            .chart-container {
                height: 200px !important;
            }
            .stats-grid {
                grid-template-columns: 1fr;
            }
            .modal-content {
                padding: 15px;
            }
            .modal-title {
                font-size: 18px;
            }
            .modal-body p {
                font-size: 13px;
            }
            .modal-btn {
                font-size: 13px;
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Order Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">×</button>
                </div>
                <div class="modal-body" id="modalBodyContent">
                    <div class="loading">Loading order details...</div>
                </div>
                <div class="modal-button-group">
                    <button type="button" class="modal-btn modal-btn-cancel" data-bs-dismiss="modal">Close</button>
                    <button id="okbutton" type="button" class="modal-btn modal-btn-confirm" data-bs-dismiss="modal">Ok</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <section class="content-main">
        <div class="content-header">
            <h2 class="content-title">Sales Dashboard</h2>
        </div>

        <div class="card">
            <div class="card-header px-4 py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="div-sec">
                        <div class="input-group input-group-sm shadow-sm">
                            <select id="time-filter" onchange="updateCharts()">
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="monthly" selected>Monthly</option>
                                <option value="yearly">Yearly</option>
                            </select>
                        </div>
                        <div>
                            <button type="button" class="btn btn-primary btn-sm shadow-sm py-2 px-3">
                                <i class="bi bi-filter"></i> Filter
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Summary Cards -->
        <div class="stats-grid">
            <div class="stats-card">
                <h3>Today's Sales</h3>
                <p>₹<%- (todaySales || 0).toLocaleString('en-IN') %></p>
            </div>
            <div class="stats-card">
                <h3>Yesterday's Sales</h3>
                <p>₹<%- (yesterdaySales || 0).toLocaleString('en-IN') %></p>
            </div>
            <div class="stats-card">
                <h3>Monthly Sales</h3>
                <p>₹<%- (monthlySales || 0).toLocaleString('en-IN') %></p>
            </div>
            <div class="stats-card">
                <h3>Yearly Sales</h3>
                <p>₹<%- (yearlySales || 0).toLocaleString('en-IN') %></p>
            </div>
        </div>

        <!-- Sales Overview Chart -->
        <div class="card chart-card big-chart">
            <div class="card-header">
                <div class="chart-header">
                    <div>
                        <h2 class="chart-title">Sales Overview</h2>
                        <p class="chart-subtitle">Revenue performance</p>
                    </div>
                    <div id="sales-total"></div>
                </div>
            </div>
            <div class="card-body">
                <div class="chart-container">
                    <canvas id="salesChart"></canvas>
                </div>
            </div>
        </div>

        <!-- 2x2 Charts Grid -->
        <div class="charts-container">
            <div class="card chart-card">
                <div class="card-header">
                    <div class="chart-header">
                        <div>
                            <h2 class="chart-title">Best Selling Products</h2>
                            <p class="chart-subtitle">Top 10 products by units sold</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="productsChart"></canvas>
                    </div>
                </div>
            </div>
            <div class="card chart-card">
                <div class="card-header">
                    <div class="chart-header">
                        <div>
                            <h2 class="chart-title">Best Selling Categories</h2>
                            <p class="chart-subtitle">Revenue distribution by category</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="categoriesChart"></canvas>
                    </div>
                    <div class="chart-legend" id="categories-legend"></div>
                </div>
            </div>
            <div class="card chart-card">
                <div class="card-header">
                    <div class="chart-header">
                        <div>
                            <h2 class="chart-title">Best Selling Brands</h2>
                            <p class="chart-subtitle">Revenue distribution by brand</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="brandsChart"></canvas>
                    </div>
                    <div class="chart-legend" id="brands-legend"></div>
                </div>
            </div>
            <div class="card chart-card">
                <div class="card-header">
                    <div class="chart-header">
                        <div>
                            <h2 class="chart-title">Order Status Distribution</h2>
                            <p class="chart-subtitle">Current order statuses</p>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="statusChart"></canvas>
                    </div>
                    <div class="chart-legend" id="status-legend"></div>
                </div>
            </div>
        </div>

        <!-- Recent Orders Table -->
        <div class="card table-container">
            <div class="card-header">
                <div class="table-header">
                    <div>
                        <h2 class="chart-title">Recent Orders</h2>
                        <p class="chart-subtitle">Last 10 orders from all channels</p>
                    </div>
                    <div>
                        <select id="orders-filter" style="padding: 5px; border-radius: 10px;">
                            <option value="all">All Orders</option>
                            <option value="delivered">Delivered</option>
                            <option value="processing">Processing</option>
                            <option value="shipped">Shipped</option>
                            <option value="cancelled">Cancelled</option>
                            <option value="returned">Returned</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th class="text-center">Date</th>
                                <th class="text-center">Amount</th>
                                <th class="text-center">Status</th>
                            </tr>
                        </thead>
                        <tbody id="tbody"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </section>

    <script>
        let salesChart, productsChart, categoriesChart, brandsChart, statusChart;

        const chartColors = [
            '#4361ee', '#3a0ca3', '#7209b7', '#f72585', '#4cc9f0',
            '#ff9e00', '#38b000', '#9d4edd', '#d90429', '#0077b6'
        ];

        // Format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-IN', {
                style: 'currency',
                currency: 'INR',
                maximumFractionDigits: 2,
            }).format(amount);
        }

        // Format number with commas
        const formatNumber = (value) => {
            return new Intl.NumberFormat('en-IN').format(value);
        };

        async function fetchChartData(filter = 'monthly') {
            try {
                const res = await fetch(`/admin/dashboard/data/${filter}`);
                if (!res.ok) {
                    throw new Error(`HTTP error! Status: ${res.status}`);
                }
                const data = await res.json();
                if (!data.sales || !data.products || !data.categories || !data.brands || !data.status || !data.recentOrders) {
                    throw new Error('Invalid data structure');
                }
                console.log('Fetched data:', data);
                return {
                    todaySales: data.todaySales,
                    yesterdaySales: data.yesterdaySales,
                    monthlySales: data.monthlySales,
                    yearlySales: data.yearlySales,
                    labels: {
                        salesOverview: data.sales.labels,
                        products: data.products.labels,
                        categories: data.categories.labels,
                        brands: data.brands.labels,
                        orderStatus: data.status.labels,
                    },
                    datasets: {
                        sales: data.sales.data,
                        products: data.products.data,
                        categories: data.categories.data,
                        brands: data.brands.data,
                        orderStatus: data.status.data,
                    },
                    recentOrders: data.recentOrders,
                };
            } catch (error) {
                console.error('Error fetching chart data:', error.message);
                alert('Failed to load chart data. Check console for details.');
                return {
                    todaySales: 0,
                    yesterdaySales: 0,
                    monthlySales: 0,
                    yearlySales: 0,
                    labels: {
                        salesOverview: [],
                        products: [],
                        categories: [],
                        brands: [],
                        orderStatus: [],
                    },
                    datasets: {
                        sales: [],
                        products: [],
                        categories: [],
                        brands: [],
                        orderStatus: [],
                    },
                    recentOrders: [],
                };
            }
        }

        function safeDestroy(chart) {
            if (chart && chart.destroy) chart.destroy();
        }

        function renderRecentOrders(recentOrders) {
            const tbody = document.getElementById('tbody');
            tbody.innerHTML = '';

            recentOrders.forEach(order => {
                const statusClass =
                    order.status.toLowerCase() === 'delivered' ? 'status-delivered' :
                    order.status.toLowerCase() === 'processing' ? 'status-processing' :
                    order.status.toLowerCase() === 'returned' ? 'status-returned' :
                    order.status.toLowerCase() === 'shipped' ? 'status-shipped' :
                    'status-cancelled';

                const row = `
                    <tr>
                        <td data-label="Order ID"><a href="#" style="text-decoration: none; color: var(--text-dark);" onclick="showOrderDetailsModal('${order.orderId}')">#${order.orderId}</a></td>
                        <td data-label="Customer">${order.customerName}</td>
                        <td data-label="Date" class="text-center">${new Date(order.createdOn).toLocaleDateString('en-IN')}</td>
                        <td data-label="Amount" class="text-center amount">${formatCurrency(order.amount)}</td>
                        <td data-label="Status" class="text-center"><span class="status-badge ${statusClass}">${order.status}</span></td>
                    </tr>
                `;
                tbody.insertAdjacentHTML('beforeend', row);
            });
        }

        function showOrderDetailsModal(orderId) {
            const modalBody = document.getElementById('modalBodyContent');
            modalBody.innerHTML = '<div class="loading">Loading order details...</div>';
            const myModal = new bootstrap.Modal(document.getElementById("myModal"));
            myModal.show();

            fetch(`/admin/orderdetails?orderId=${orderId}`)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to fetch order details');
                    return response.json();
                })
                .then(data => {
                    if (!data.success || !data.order) {
                        throw new Error(data.message || 'Order not found');
                    }
                    const orderDetails = data.order;
                    let modalContent = `
                        <div class="row mb-3">
                            <div class="col-8">
                                <h5 class="mb-1">Order #${orderDetails.orderId}</h5>
                                <p class="text-muted mb-0">Placed on ${new Date(orderDetails.createdOn).toLocaleDateString('en-IN')}</p>
                            </div>
                            <div class="col-4 text-end">
                                <span class="badge ${orderDetails.status === 'Shipped' ? 'bg-success' : orderDetails.status === 'Delivered' ? 'bg-success' : 'bg-warning'}">${orderDetails.status}</span>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-12">
                                <h6 class="mb-2">Order Items</h6>
                                ${orderDetails.orderItems.map(item => `
                                    <div class="card mb-2">
                                        <div class="card-body py-2">
                                            <div class="row align-items-center">
                                                <div class="col-2">
                                                    <img src="${item.product.productImage?.[0] || '/img/placeholder.jpg'}" alt="Product" class="img-fluid rounded">
                                                </div>
                                                <div class="col-7">
                                                    <p class="mb-0 fw-bold">${item.product.productName}</p>
                                                    <small>${item.stock} x ${formatCurrency(item.price || item.product.salePrice)}</small>
                                                </div>
                                                <div class="col-3 text-end">
                                                    <p class="mb-0 fw-bold">${formatCurrency(item.stock * (item.price || item.product.salePrice))}</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-12">
                                <div class="card">
                                    <div class="card-body">
                                        <h6 class="mb-2">Order Summary</h6>
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Subtotal:</span>
                                            <span>${formatCurrency(orderDetails.totalPrice)}</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Shipping:</span>
                                            <span>₹0</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Discount:</span>
                                            <span>${formatCurrency(orderDetails.discount || 0)}</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-1">
                                            <span>Coupon Discount:</span>
                                            <span>${formatCurrency(orderDetails.couponDiscount || 0)}</span>
                                        </div>
                                        <hr class="my-2">
                                        <div class="d-flex justify-content-between fw-bold">
                                            <span>Total:</span>
                                            <span>${formatCurrency(orderDetails.finalAmount)}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-2 mb-md-0">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h6 class="card-title">Shipping Address</h6>
                                        <p class="card-text mb-0">
                                            ${orderDetails.userId?.name || 'Unknown'}<br>
                                            ${orderDetails.address?.[0]?.addressType || 'N/A'}<br>
                                            ${orderDetails.address?.[0]?.city || ''}, ${orderDetails.address?.[0]?.state || ''} ${orderDetails.address?.[0]?.pincode || ''}<br>
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h6 class="card-title">Payment Method</h6>
                                        <p class="card-text mb-1">${orderDetails.paymentMethod || 'N/A'}</p>
                                    </div>
                                </div>
                            </div>
                            ${orderDetails.ReturnReason ? `
                                <hr class="text-light">
                                <h6 class="card-title">Return Reason</h6>
                                <p class="card-text text-warning mb-0">${orderDetails.ReturnReason}</p>
                            ` : ''}
                        </div>
                    `;
                    modalBody.innerHTML = modalContent;
                })
                .catch(error => {
                    console.error('Error fetching order details:', error.message);
                    modalBody.innerHTML = '<p class="text-danger">Failed to load order details. Please try again.</p>';
                });
        }

        function generateLegend(chartId, labels, colors) {
            const legendEl = document.getElementById(`${chartId}-legend`);
            if (!legendEl) return;

            legendEl.innerHTML = '';
            labels.forEach((label, index) => {
                const item = document.createElement('div');
                item.className = 'legend-item';

                const colorBox = document.createElement('span');
                colorBox.className = 'legend-color';
                colorBox.style.backgroundColor = colors[index % colors.length];

                const text = document.createElement('span');
                text.textContent = label;

                item.appendChild(colorBox);
                item.appendChild(text);
                legendEl.appendChild(item);
            });
        }

        function updateSalesTotal(data) {
            const totalElement = document.getElementById('sales-total');
            if (!totalElement) return;

            const total = data.reduce((acc, val) => acc + val, 0);
            totalElement.innerHTML = `
                <div style="text-align: right">
                    <div style="font-size: 14px; color: var(--text-light);">Total Sales</div>
                    <div style="font-size: 20px; font-weight: 600; color: var(--primary-color)">
                        ${formatCurrency(total)}
                    </div>
                </div>
            `;
        }

        function renderCharts(labels, datasets) {
            safeDestroy(salesChart);
            safeDestroy(productsChart);
            safeDestroy(categoriesChart);
            safeDestroy(brandsChart);
            safeDestroy(statusChart);

            const salesCtx = document.getElementById('salesChart');
            if (salesCtx) {
                updateSalesTotal(datasets.sales);
                if (!labels.salesOverview.length || !datasets.sales.length) {
                    salesCtx.parentElement.innerHTML = '<p class="loading">No sales data available for this period.</p>';
                    return;
                }
                salesChart = new Chart(salesCtx, {
                    type: 'line',
                    data: {
                        labels: labels.salesOverview,
                        datasets: [{
                            label: 'Revenue',
                            data: datasets.sales,
                            fill: false,
                            borderColor: 'rgba(67, 97, 238, 1)',
                            backgroundColor: 'rgba(67, 97, 238, 0.2)',
                            tension: 0.3,
                            pointRadius: 4,
                            pointBackgroundColor: 'rgba(67, 97, 238, 1)',
                            pointBorderColor: '#fff',
                            pointHoverRadius: 6,
                        }],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        return formatCurrency(context.raw);
                                    },
                                },
                            },
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: { drawBorder: false, color: 'rgba(0, 0, 0, 0.1)' },
                                ticks: {
                                    callback: function (value) {
                                        return formatCurrency(value);
                                    },
                                },
                            },
                            x: {
                                grid: { display: false },
                            },
                        },
                    },
                });
            }

            const productsCtx = document.getElementById('productsChart');
            if (productsCtx) {
                if (!labels.products.length || !datasets.products.length) {
                    productsCtx.parentElement.innerHTML = '<p class="loading">No product data available.</p>';
                    return;
                }
                productsChart = new Chart(productsCtx, {
                    type: 'bar',
                    data: {
                        labels: labels.products,
                        datasets: [{
                            label: 'Units Sold',
                            data: datasets.products,
                            backgroundColor: chartColors,
                            borderColor: chartColors,
                            borderWidth: 1,
                            borderRadius: 4,
                        }],
                    },
                    options: {
                        indexAxis: 'y',
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        return `Units Sold: ${formatNumber(context.raw)}`;
                                    },
                                },
                            },
                        },
                        scales: {
                            x: {
                                beginAtZero: true,
                                grid: { color: 'rgba(0, 0, 0, 0.1)' },
                                ticks: {
                                    callback: function (value) {
                                        return formatNumber(value);
                                    },
                                    font: { size: 12 },
                                },
                            },
                            y: {
                                grid: { display: false },
                                ticks: { font: { size: 12 } },
                            },
                        },
                    },
                });
            }

            const categoriesCtx = document.getElementById('categoriesChart');
            if (categoriesCtx) {
                if (!labels.categories.length || !datasets.categories.length) {
                    categoriesCtx.parentElement.innerHTML = '<p class="loading">No category data available.</p>';
                    return;
                }
                categoriesChart = new Chart(categoriesCtx, {
                    type: 'pie',
                    data: {
                        labels: labels.categories,
                        datasets: [{
                            label: 'Category Sales',
                            data: datasets.categories,
                            backgroundColor: chartColors.slice(0, labels.categories.length),
                            borderColor: '#ffffff',
                            borderWidth: 2,
                        }],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const value = context.raw;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${context.label}: ${formatNumber(value)} (${percentage}%)`;
                                    },
                                },
                            },
                        },
                    },
                });
                generateLegend('categories', labels.categories, chartColors);
            }

            const brandsCtx = document.getElementById('brandsChart');
            if (brandsCtx) {
                if (!labels.brands.length || !datasets.brands.length) {
                    brandsCtx.parentElement.innerHTML = '<p class="loading">No brand data available.</p>';
                    return;
                }
                brandsChart = new Chart(brandsCtx, {
                    type: 'doughnut',
                    data: {
                        labels: labels.brands,
                        datasets: [{
                            label: 'Brand Sales',
                            data: datasets.brands,
                            backgroundColor: chartColors.slice(0, labels.brands.length),
                            borderColor: '#ffffff',
                            borderWidth: 2,
                        }],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        cutout: '65%',
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const value = context.raw;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${context.label}: ${formatNumber(value)} (${percentage}%)`;
                                    },
                                },
                            },
                        },
                    },
                });
                generateLegend('brands', labels.brands, chartColors);
            }

            const statusCtx = document.getElementById('statusChart');
            if (statusCtx) {
                if (!labels.orderStatus.length || !datasets.orderStatus.length) {
                    statusCtx.parentElement.innerHTML = '<p class="loading">No order status data available.</p>';
                    return;
                }
                statusChart = new Chart(statusCtx, {
                    type: 'polarArea',
                    data: {
                        labels: labels.orderStatus,
                        datasets: [{
                            label: 'Orders',
                            data: datasets.orderStatus,
                            backgroundColor: [
                                'rgba(40, 167, 69, 0.7)',  // Delivered
                                'rgba(255, 193, 7, 0.7)',   // Processing
                                'rgba(220, 53, 69, 0.7)',   // Cancelled
                                'rgba(108, 117, 125, 0.7)', // Others
                                'rgba(0, 123, 255, 0.7)',   // Shipped
                                'rgba(220, 53, 69, 0.7)',   // Returned
                            ],
                        }],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        const value = context.raw;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${context.label}: ${formatNumber(value)} (${percentage}%)`;
                                    },
                                },
                            },
                        },
                        scales: {
                            r: {
                                ticks: { display: false },
                            },
                        },
                    },
                });
                generateLegend('status', labels.orderStatus, [
                    '#28a745', '#ffc107', '#dc3545', '#6c757d', '#007bff', '#dc3545'
                ]);
            }
        }

        async function updateCharts() {
            const timeFilter = document.getElementById('time-filter').value;
            console.log('Selected filter:', timeFilter);
            const data = await fetchChartData(timeFilter);
            renderCharts(data.labels, data.datasets);
            renderRecentOrders(data.recentOrders);
        }

        document.getElementById('orders-filter').addEventListener('change', function () {
            const filterValue = this.value.toLowerCase();
            const rows = document.querySelectorAll('.table tbody tr');

            rows.forEach(row => {
                const statusCell = row.querySelector('td:nth-child(5) .status-badge');
                if (!statusCell) return;

                const status = statusCell.textContent.toLowerCase();
                row.style.display = filterValue === 'all' || status === filterValue ? '' : 'none';
            });
        });

        window.addEventListener('DOMContentLoaded', updateCharts);
    </script>
</body>
</html>